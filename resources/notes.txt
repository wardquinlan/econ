- int merge(Object object, Series series[, Boolean withMetaData]);
  => where object is an id or a name (but not a symbol)
  => validates that series does not have an id attached
  => validates that series name == name loaded from data store

- defaults() can show default values. Maybe.  It won't show the colour names though, only their hex values, so this might be of limited use.
- alternatively defaults() can display the contents of the defaults file.

- Alternatively could introduce IF / WHILE / FOR Token Types like this.  Each of these tokens would store a (sub) token list, but this list would only be sent through the parser if the
  condition was true.
  
Main point is that the tokens within the IF / WHILE / FOR block are not part of the main token sequence.  But they do contain a sub token block that is sent through the parser
if the condition evaluates to true.
  
if (condition) {
  // These tokens are stored inside the IF token but are not added to the main token chain
  // if the body contains additional if statements, these will be handled recursively
  ...
}    

And setId() should check to see if that id is already being used.
Same for setName()
... but what if we are not connected to the datastore??

if we overflow gridline array, we get an array out of bounds.  Should probably fix this.

** load() also deletes all the metadata in the parser!!!!!!!!!!!
** test merge updates / deletes

change();
pchange();

------------------------------------------------

Notes: June 2023
----------------

- drop() should require administrative access
- mergeAll() should merge all FRED series.  Note that internally it can simply invoke the merge() command which will do all the validation

September 2023
--------------

Cat() command.  Do we also loop through the parent symbol table?

Log() command.  INFO, WARN, ERROR.  Also change existing log() to ln()


NOTE

In order to support if() statements without {} blocks, I think I need ANOTHER PARSER PASS.  This pass would go through and insert the {} blocks around the if / else blocks as needed.
This could be a completely different parser, or it could be the same parser with some sort of flag.

The reason we need to do this is because we need to call the parser to get the whole list of tokens to insert into the block ... but we can't directly call the parser as is because
that would evaluate the block.  Which we don't want to do.

We need a parser pass which generates the list of tokens, but WITHOUT ACTUALLY DOING THE EVALUATION.

-----

We can define 2 new functions:

void define(String name, Object value);
boolean defined(String name);

These functions define / determine if something is defined ... at the GLOBAL scope.  It has to be at the GLOBAL scope.  If it is at the LOCAL scope, then
it will fall out of scope, and defined() will always return false.

Then, we can do this at the beginning of include files:

if (!defined(FUNCTIONS_)) {
define('FUNCTIONS_', 1);

# ... body of 'FUNCTIONS'
  
}

-----

We might also want to add a new column to TIME_SERIES:

LAST_MERGED TIMESTAMP;

We just update each series with the last merge time.  It can be NULL for backwards compatibility purposes.

