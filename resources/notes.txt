Notes
=====

In general I need to completely rethink settings.  Most of current settings are ACTUALLY DEFAULT VALUES.  However, I can foresee:
  - settings.dao.hostname
  - settings.dao.database
  - settings.dao.username
  - settings.dao.password
  - BUT NOTE THAT ALL OF THESE MIGHT JUST GO RIGHT INTO connect() as parameters
  - note that ECON_HOME will remain as an environment variable
  - also note that these will not be checked into GIT

For defaults, order will be:
  - setting defined inside <chart>, <panel> whatever...
  - if not defined, then use defaults.panel.whatever, defaults.chart.whatever, ...
  - if not defined, then use Defaults.WHATEVER in Java
  
Have to do Log Scaling

I would like to support Econ --define some-setting=some-value from the command line.  An arbitrary # of them...

New panel attribute:
  - "date-frequency" = {none, days, months, years}
  - default is months

NOTE: put symbolTable to Context, Panel, etc, constructors
=> and DON'T CALL putAll()!
  
Context Attributes

Panel Attributes

  XML ATTRIBUTE         TYPE    SETTINGS PROPERTY             JAVA CONSTANT                           GETTER(SETTER) METHOD  
  datefrequency         String  defaults.panel.datefrequency  Constants.DEFAULTS_PANEL_DATEFREQUENCY  panel.getDateFrequency()
  dxincr                int     defaults.panel.dxincr         Constants.DEFAULTS_PANEL_DXINCR         panel.getDxIncr()
  gridlinetextwidth     int     defaults.panel
  fontname              String    
  fontcolor             int
  label                 String
  backgroundcolor       int
  
Chart Attributes    

Series Attributes


Other settings can include:
  - settings.confirm = FALSE | TRUE
  - if TRUE, then prompt a confirmation for "dangerous" functions, such as insert(), delete(), save()

Import() may want to do 2 passes.  1st pass puts everything into a TreeMap.  Which handles overwrites.  Then second pass
just traverses the tree map.  We also don't have to sort it, either.
  - only for QTEMPLATE and QDB sources...
  
I think I want to support "." as a synonym for "include"

We should use TreeMap rather than HashMap for the symbol table

I have also considered new functions:
  - assert(boolean-condition, "error-message");
  - throws an exception with "error-message" if boolean-condition is false
  - Object read();
  - reads object from stdin (Integer, Float, Boolean, or String)
  - collapse();
  - normalize();
  - save(); --> saves an entire series
  - merge(); --> merges to an existing series
  - insert();
  - * this could potentially insert right into the datastore, being consistent with functions like data() and meta()
  - delete();
  - takes a date or an index
  - connect()
  - could take parameters to connect
  - disconnect()
  - disconnect current connection, if connected
  - maybe.  Note sure I need this.
  - can maybe only ever allow either 0 or 1 connection per instance, and it is automatically disconnected
  - note that we might want to let the user connect, so that Econ can run without a database at all
  - Object getXXXX(Series);
  - Object setXXXX(Series, Object);
  - XXXX is one of: {Id, Name, Title, Source, SourceId, Notes}
  - String timestamp();
  - size(Series);
      
Series will have to support BOOLs for conditions.  But we probably don't have to save these to the datastore  

